/// Types and initial data used for constructing [KEYMAP].
pub mod init {
    use crate as smart_keymap;

    /// Config used by tap-hold keys.
    pub const CONFIG: smart_keymap::key::composite::Config = smart_keymap::key::composite::Config {
        chorded: smart_keymap::key::chorded::Config {
            chords: smart_keymap::slice::Slice::from_slice(&[
                smart_keymap::key::chorded::ChordIndices::from_slice(&[0, 1]),
            ]),
            ..smart_keymap::key::chorded::DEFAULT_CONFIG
        },
        sticky: smart_keymap::key::sticky::DEFAULT_CONFIG,
        tap_dance: smart_keymap::key::tap_dance::DEFAULT_CONFIG,
        tap_hold: smart_keymap::key::tap_hold::DEFAULT_CONFIG,
        ..smart_keymap::key::composite::DEFAULT_CONFIG
    };

    /// Number of layers supported by the [smart_keymap::key::layered] implementation.
    pub const LAYER_COUNT: usize = 0;

    /// The maximum number of keys in a chord.
    pub const MAX_CHORD_SIZE: usize = 2;

    /// The maximum number of chords.
    pub const MAX_CHORDS: usize = 1;

    /// The maximum number of overlapping chords for a chorded key.
    pub const MAX_OVERLAPPING_CHORD_SIZE: usize = 1;

    /// The tap-dance definitions.
    pub const MAX_TAP_DANCE_DEFINITIONS: usize = 0;

    pub use smart_keymap::key::composite::Context;

    pub use smart_keymap::key::composite::Event;

    pub use smart_keymap::key::composite::PendingKeyState;

    pub use smart_keymap::key::composite::KeyState;

    pub use smart_keymap::key::composite::Key;

    /// Initial [Context] value.
    pub const CONTEXT: Context =
        smart_keymap::key::composite::Context::from_config(smart_keymap::key::composite::Config {
            chorded: smart_keymap::key::chorded::Config {
                chords: smart_keymap::slice::Slice::from_slice(&[
                    smart_keymap::key::chorded::ChordIndices::from_slice(&[0, 1]),
                ]),
                ..smart_keymap::key::chorded::DEFAULT_CONFIG
            },
            sticky: smart_keymap::key::sticky::DEFAULT_CONFIG,
            tap_dance: smart_keymap::key::tap_dance::DEFAULT_CONFIG,
            tap_hold: smart_keymap::key::tap_hold::DEFAULT_CONFIG,
            ..smart_keymap::key::composite::DEFAULT_CONFIG
        });

    smart_keymap::tuples::define_keys!(2);

    /// Alias for a [tuples] KeysN type, as generated by keymap.ncl.
    pub type KeyDefinitionsType = Keys2<
        smart_keymap::key::chorded::Key<
            smart_keymap::key::composite::Layered<
                smart_keymap::key::composite::TapHold<smart_keymap::key::keyboard::Key>,
            >,
        >,
        smart_keymap::key::chorded::AuxiliaryKey<
            smart_keymap::key::composite::Layered<
                smart_keymap::key::composite::TapHold<smart_keymap::key::keyboard::Key>,
            >,
        >,
        Context,
        Event,
        PendingKeyState,
        KeyState,
    >;

    /// Alias for the [keymap::Keymap] type.
    pub type Keymap =
        smart_keymap::keymap::Keymap<Context, Event, PendingKeyState, KeyState, KeyDefinitionsType>;

    /// A [tuples] KeysN value with keys, as generated by keymap.ncl.
    pub const KEY_DEFINITIONS: KeyDefinitionsType = Keys2::new((
        smart_keymap::key::chorded::Key::new(
            &[(
                0,
                smart_keymap::key::composite::Layered(smart_keymap::key::composite::TapHold(
                    smart_keymap::key::keyboard::Key::new(6),
                )),
            )],
            smart_keymap::key::composite::Layered(smart_keymap::key::composite::TapHold(
                smart_keymap::key::keyboard::Key::new(4),
            )),
        ),
        smart_keymap::key::chorded::AuxiliaryKey::new(smart_keymap::key::composite::Layered(
            smart_keymap::key::composite::TapHold(smart_keymap::key::keyboard::Key::new(5)),
        )),
    ));
}
